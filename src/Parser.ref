*$FROM Utils
$EXTERN OneOf, Builtins;
*$EXTERN Success, Fails

*$FROM Lexer
*$EXTERN TkSpecComment, TkExtern, TkEntry, TkSemicolon, TkEOF, TkName, TkComma
*$EXTERN TkOpenBlock, TkCloseBlock, TkAssign, TkColon, TkCompound, TkMacroDigit
*$EXTERN TkChar, TkVariable, TkOpenBracket, TkOpenCall, TkCloseBracket
*$EXTERN TkCloseCall, TkError

*$FROM Library
*$EXTERN True


/**
  <Parse e.Tokens>
    == Success t.Unit*
    == Fails t.Error*

  t.Error ::= (t.Pos e.Message)
  t.Unit ::= t.Function | t.Extern | t.SpecialComment
  t.Extern ::= (Extern (e.Name)*)
  t.SpecialComment ::= (SpecialComment t.SrcPos e.Text)

  t.Function ::= (Function t.SrcPos (e.Name) s.Scope t.Sentence*)
  s.Scope ::= Entry | Local
  t.Sentence ::= (t.Pattern (Condition t.Result t.Pattern)* e.SentenceTail)
  e.SentenceTail ::= RETURN t.Result | CALL-BLOCK t.Result t.Sentence*

  t.Pattern, t.Result ::= (t.Term*)
  t.Term ::=
      (Compound e.Chars*)
    | (Number s.Number)
    | (Char s.Char)
    | (Variable t.SrcPos s.VarType e.Index)
    | (Brackets t.Term*)
    | (Call t.SrcPos (e.Function) t.Terms*)
  s.VarType ::= 's' | 't' | 'e'
*/
$ENTRY Parse {
  e.Tokens =
    <Semantics <Program  e.Tokens>>;
}

/*
  Program = Unit* EOF.

  <Program e.Tokens> == t.ErrorUnit*

  t.ErrorUnit ::= (Error t.Pos e.Message) | t.Unit
*/
Program {
  t.NextToken e.Tokens,
      t.NextToken: (s.Type t.Pos e.Value),
      <OneOf s.Type TkSpecComment TkExtern TkEntry TkName TkSemicolon>: True =
    <Program-AfterUnit <Unit t.NextToken e.Tokens>>;

  (TkEOF t.Pos) = /* всё */;

  t.Unexpected e.Tokens,
      t.Unexpected: (s.Type t.Pos e.Value) =
    <UnexpectedToken
      t.Unexpected '$EXTERN, $ENTRY, function name or special comment'
    >
    <Program e.Tokens>;
}

Program-AfterUnit {
  (e.ErrorsUnits) e.Tokens = e.ErrorsUnits <Program e.Tokens>;
}

*$EENUM SpecialComment

/*
  Unit = SPECIAL-COMMENT | "$EXTERN" NameList | Function.

  <Unit e.Tokens> == (t.ErrorUnit*) e.Tokens
*/
Unit {
  t.NextToken e.Tokens,
      t.NextToken:
    {
      (TkSpecComment t.Pos e.Text) =
        ((SpecialComment t.Pos e.Text)) e.Tokens;

      (TkExtern t.Pos) =
        <NameList e.Tokens>;

      (TkSemicolon t.Pos) =
        (/* игнорируем */) e.Tokens;

      (s.Type t.Pos e.Value),
          <OneOf s.Type TkEntry TkName>: True =
        <ParseFunction t.NextToken e.Tokens>;

      /* других типов быть не должно */
    }
}

*$ENUM Error

/*
  NameList = NAME { "," NAME } ";".

  <NameList e.Tokens> == (t.ErrorUnit*) e.Tokens
*/
NameList {
  (TkName t.Pos e.Name) e.Tokens =
    <NameList-DoNames ((e.Name)) (/* errors */) e.Tokens>;

  t.NextToken e.Tokens,
      t.NextToken: (s.Type t.Pos e.Value) =
    ((Error t.Pos 'expected function name after $EXTERN keyword'))
    t.NextToken e.Tokens;
}

*$EENUM Extern

NameList-DoNames {
  (e.Names) (e.Errors)
  (TkComma t.CommaPos) (TkName t.NamePos e.Name) e.Tokens =
    <NameList-DoNames (e.Names (e.Name)) (e.Errors) e.Tokens>;

  (e.Names) (e.Errors) (TkSemicolon t.Pos) e.Tokens =
    ((Extern e.Names) e.Errors) e.Tokens;

  (e.Names) (e.Errors) (TkComma t.Pos) e.Tokens =
    <NameList-DoNames
      (e.Names)
      (e.Errors (Error t.Pos 'expected name after comma'))
      e.Tokens
    >;

  (e.Names) (e.Errors)
  (TkName t.NamePos e.Name) (TkOpenBlock t.BracketPos) e.Tokens =
    (
      (Extern e.Names)
      e.Errors
      (Error t.NamePos 'missed semicolon after previous $EXTERN declaration')
    )
    (TkName t.NamePos e.Name) (TkOpenBlock t.BracketPos) e.Tokens;

  (e.Names) (e.Errors) (TkName t.Pos e.Name) e.Tokens =
    <NameList-DoNames
      (e.Names)
      (e.Errors (Error t.Pos 'missed comma after external name'))
      e.Tokens
    >;

  (e.Names) (e.Errors) t.NextToken e.Tokens,
      t.NextToken: (s.Type t.Pos e.Value),
      <OneOf s.Type TkExtern TkEntry TkSpecComment TkEOF>: True =
    (
      (Extern e.Names)
      e.Errors
      (Error t.Pos 'missed semicolon')
    )
    t.NextToken e.Tokens;

  (e.Names) (e.Errors) t.NextToken e.Tokens =
    <NameList-DoNames
      (e.Names)
      (e.Errors <UnexpectedToken t.NextToken 'comma or semicolon'>)
      e.Tokens
    >;
}

*$EENUM Function, Entry, Local

/*
  Function = ["$ENTRY"] NAME Block.

  <Function e.Tokens> == (e.Errors t.FunctionUnit) e.Tokens
*/
ParseFunction {
  (TkEntry t.EntryPos) (TkName t.NamePos e.Name) e.Tokens =
    <Function-AfterBlock
      t.EntryPos (e.Name) Entry <Block e.Tokens>
    >;

  (TkName t.Pos e.Name) e.Tokens =
    <Function-AfterBlock
      t.Pos (e.Name) Local <Block e.Tokens>
    >;

  (TkEntry t.Pos) e.Tokens =
    ((Error t.Pos '$ENTRY without function name, skipped'))
    e.Tokens;
}

Function-AfterBlock {
  t.Pos (e.Name) s.Scope (e.Errors) (e.Sentences) e.Tokens =
    (e.Errors (Function t.Pos (e.Name) s.Scope e.Sentences))
    e.Tokens;
}


/*
  Block = "{" Sentence { ";" Sentence } [";"] "}".

  <Block e.Tokens> == (e.Errors) (e.Sentences) e.Tokens
*/
Block {
  (TkOpenBlock t.Pos) e.Tokens =
    <Block-AfterSentence
      (/* errors */) (/* sentences */)
      <Sentence e.Tokens>
    >;

  t.Unexpected e.Tokens =
    (<UnexpectedToken t.Unexpected '\'{\''>)
    (/* no sentences */)
    t.Unexpected e.Tokens;
}

Block-AfterSentence {
  (e.Errors) (e.Sentences)
  (e.SentenceErrors) t.NextSentence
  t.Token1 t.Token2 e.Tokens,
      t.Token1 t.Token2:
    {
      (TkSemicolon t.Pos1) (TkCloseBlock t.Pos2) =
        <CheckEmptyBlock
          (e.Errors e.SentenceErrors)
          (e.Sentences t.NextSentence)
          t.Pos1 e.Tokens
        >;

      (TkCloseBlock t.Pos) t.Token2 =
        <CheckEmptyBlock
          (e.Errors e.SentenceErrors)
          (e.Sentences t.NextSentence)
          t.Pos t.Token2 e.Tokens
        >;

      (TkSemicolon t.Pos) t.Token2 =
        <Block-AfterSentence
          (e.Errors e.SentenceErrors)
          (e.Sentences t.NextSentence)
          <Sentence t.Token2 e.Tokens>
        >;

      t.Token1 t.Token2 =
        <Block-AfterSentence
          (
            e.Errors e.SentenceErrors
            <UnexpectedToken t.Token1 '\';\' or \'}\', skipped'>
          )
          (e.Sentences t.NextSentence)
          <Sentence t.Token2 e.Tokens>
        >
    };

  (e.Errors) (e.Sentences)
  (e.SentenceErrors) t.NextSentence
  (TkEOF t.Pos) =
    <CheckEmptyBlock
      (
        e.Errors e.SentenceErrors
        <UnexpectedToken (TkEOF t.Pos) '\';\' or \'}\''>
      )
      (e.Sentences t.NextSentence)
      t.Pos (TkEOF t.Pos)
    >;
}

CheckEmptyBlock {
  (e.Errors) (/* no sentences */) t.Pos e.Tokens =
    (e.Errors (Error t.Pos 'Empty function block'))
    (/* no sentences */) e.Tokens;

  (e.Errors) (e.Sentences) t.Pos e.Tokens =
    (e.Errors) (e.Sentences) e.Tokens;
}


/*
  Sentence = Pattern ("=" Result | "," ExtensionChain).

  <Sentence e.Tokens> == (e.Errors) t.Sentence e.Tokens
*/
Sentence {
  e.Tokens =
    <Sentence-AfterPattern <Pattern e.Tokens>>;
}

*$EENUM RETURN, CALL-BLOCK, Condition

Sentence-AfterPattern {
  (e.Errors) t.Pattern (TkAssign t.Pos) e.Tokens =
    <Sentence-AfterResult
      (e.Errors) t.Pattern <Result e.Tokens>
    >;

  (e.Errors) t.Pattern (TkComma t.Pos) e.Tokens =
    <Sentence-AfterExtensionChain
      (e.Errors) t.Pattern <ExtensionChain e.Tokens>
    >;

  (e.Errors) t.Pattern (TkSemicolon t.Pos) e.Tokens =
    <Sentence-AfterResult
      (e.Errors (Error t.Pos 'Missed \'=\'')) t.Pattern
      <Result (TkSemicolon t.Pos) e.Tokens>
    >;

  (e.Errors) t.Pattern (TkColon t.Pos) e.Tokens =
    <Sentence-AfterExtensionChain
      (e.Errors (Error t.Pos 'Missed \',\'')) t.Pattern
      <ExtensionChain (TkColon t.Pos) e.Tokens>
    >;

  (e.Errors) t.Pattern t.Unexpected e.Tokens =
    (e.Errors <UnexpectedTokenInSentence t.Unexpected>)
    (t.Pattern RETURN (/* пустой результат */))
    t.Unexpected e.Tokens;
}

UnexpectedTokenInSentence {
  t.Unexpected =
    <UnexpectedToken
      t.Unexpected 'valid Refal expression, \'=\', \',\', \':\' or \';\''
    >
}

Sentence-AfterResult {
  (e.Errors) t.Pattern (e.ResultErrors) t.Result e.Tokens =
    (e.Errors e.ResultErrors)
    (t.Pattern RETURN t.Result)
    e.Tokens
}

Sentence-AfterExtensionChain {
  (e.Errors) t.Pattern (e.ExtensionErrors) (e.Conditions-And-SentenceTail)
  e.Tokens =
    (e.Errors e.ExtensionErrors)
    (t.Pattern e.Conditions-And-SentenceTail)
    e.Tokens;
}


/*
  ExtensionChain =
    Result ":" (Block | Pattern ("," ExtensionChain | "=" Result)).

  <ExtensionChain e.Tokens>
    == (e.Errors) (e.Conditions-And-SentenceTail) e.Tokens
*/
ExtensionChain {
  e.Tokens =
    <ExtensionChain-AfterResult <Result e.Tokens>>;
}

ExtensionChain-AfterResult {
  (e.Errors) t.Result (TkColon t.ColonPos) (TkOpenBlock t.BlockPos) e.Tokens =
    <ExtensionChain-AfterBlock
      (e.Errors) t.Result <Block (TkOpenBlock t.BlockPos) e.Tokens>
    >;

  (e.Errors) t.Result t.NextToken e.Tokens,
      t.NextToken:
    {
      (TkColon t.Pos) =
        <ExtensionChain-AfterPattern
          (e.Errors) t.Result <Pattern e.Tokens>
        >;

      (TkOpenBlock t.Pos) =
        <ExtensionChain-AfterBlock
          (e.Errors (Error t.Pos 'Missed \':\' before block')) t.Result
          <Block (TkOpenBlock t.Pos) e.Tokens>
        >;

      (TkSemicolon t.Pos) =
        (e.Errors (Error t.Pos 'Mistaken \',\' for \'=\''))
        (RETURN t.Result)
        (TkSemicolon t.Pos) e.Tokens;

      (s.Type t.Pos),
          <OneOf s.Type TkComma TkAssign>: True =
        <ExtensionChain-AfterPattern
          (e.Errors (Error t.Pos 'Missed \':\'')) t.Result
          <Pattern (TkComma t.Pos) e.Tokens>
        >;

      t.Unexpected =
        (e.Errors <UnexpectedTokenInSentence t.Unexpected>)
        (RETURN t.Result) t.Unexpected e.Tokens
    }
}

ExtensionChain-AfterBlock {
  (e.Errors) t.Result (e.BlockErrors) (e.Sentences) e.Tokens =
    (e.Errors e.BlockErrors)
    (CALL-BLOCK t.Result e.Sentences)
    e.Tokens;
}

ExtensionChain-AfterPattern {
  (e.Errors) t.Result (e.PatternErrors) t.Pattern t.NextToken e.Tokens,
      t.NextToken:
    {
      (TkComma t.Pos) =
        <ExtensionChain-AfterExtensionChain
          (e.Errors e.PatternErrors) t.Result t.Pattern
          <ExtensionChain e.Tokens>
        >;

      (TkAssign t.Pos) =
        <ExtensionChain-AfterPattern-AfterResult
          (e.Errors e.PatternErrors) t.Result t.Pattern
          <Result e.Tokens>
        >;

      (TkColon t.Pos) =
        <ExtensionChain-AfterExtensionChain
          (e.Errors e.PatternErrors (Error t.Pos 'Missed \',\''))
          t.Result t.Pattern
          <ExtensionChain t.NextToken e.Tokens>
        >;

      (TkSemicolon t.Pos) =
        <ExtensionChain-AfterPattern-AfterResult
          (e.Errors e.PatternErrors (Error t.Pos 'Missed \'=\''))
          t.Result t.Pattern
          <Result t.NextToken e.Tokens>
        >;

      t.Unexpected =
        (e.Errors e.PatternErrors <UnexpectedTokenInSentence t.Unexpected>)
        ((Condition t.Result t.Pattern) RETURN (/* пустой результат */))
        t.Unexpected e.Tokens;
    }
}

ExtensionChain-AfterExtensionChain {
  (e.Errors) t.Result t.Pattern
  (e.ChainErrors) (e.Conditions-And-SentenceTail) e.Tokens =
    (e.Errors e.ChainErrors)
    ((Condition t.Result t.Pattern) e.Conditions-And-SentenceTail)
    e.Tokens;
}

ExtensionChain-AfterPattern-AfterResult {
  (e.Errors) t.Result t.Pattern
  (e.ResultErrors) t.FinalResult e.Tokens =
    (e.Errors e.ResultErrors)
    ((Condition t.Result t.Pattern) RETURN t.FinalResult)
    e.Tokens;
}


/*
  Pattern = Expression.

  <Pattern e.Tokens> == (e.Errors) t.Pattern e.Tokens
*/
Pattern {
  e.Tokens = <Expression Pattern e.Tokens>;
}


/*
  Result = Expression.

  <Result e.Tokens> == (e.Errors) t.Result e.Tokens
*/
Result {
  e.Tokens = <Expression Result e.Tokens>;
}


/*
  Expression = (
      NAME
    | COMPOUND
    | NUMBER
    | CHAR
    | VARIABLE
    | "(" Expression ")"
    | "<Func" Expression ">" -- допустимо только в результатных выражениях
  )* !((")" | ">") Expression)*

  <Expression s.Kind e.Tokens> == (e.Errors) t.Expression e.Tokens

  s.Kind ::= Pattern | Result
*/
Expression {
  s.Kind e.Tokens =
    <Expression-CheckBrackets
      s.Kind <Expression-Aux s.Kind e.Tokens>
    >;
}

Expression-Aux {
  s.Kind e.Tokens =
    <DoExpression s.Kind (/* errors */) (/* collected */) e.Tokens>
}

*$EENUM Compound, Number, Char, Variable, Brackets, Call

DoExpression {
  s.Kind (e.Errors) (e.Collected) t.NextToken e.Tokens,
      t.NextToken:
    {
      (TkName t.Pos e.Name) =
        <DoExpression
          s.Kind (e.Errors) (e.Collected (Compound e.Name)) e.Tokens
        >;

      (TkCompound t.Pos e.Symbols) =
        <DoExpression
          s.Kind (e.Errors) (e.Collected (Compound e.Symbols)) e.Tokens
        >;

      (TkMacroDigit t.Pos s.Number) =
        <DoExpression
          s.Kind (e.Errors) (e.Collected (Number s.Number)) e.Tokens
        >;

      (TkChar t.Pos s.Char) =
        <DoExpression
          s.Kind (e.Errors) (e.Collected (Char s.Char)) e.Tokens
        >;

      (TkVariable t.Pos s.VarType e.Index) =
        <DoExpression
          s.Kind (e.Errors)
          (e.Collected (Variable t.Pos s.VarType e.Index)) e.Tokens
        >;

      (TkOpenBracket t.Pos) =
        <DoExpression-AfterBracket
          s.Kind (e.Errors) (e.Collected) <Expression-Aux s.Kind e.Tokens>
        >;

      (TkOpenCall t.Pos e.FuncName) =
        <DoExpression-AfterCall
          s.Kind (e.Errors) (e.Collected) t.Pos (e.FuncName)
          <Expression-Aux s.Kind e.Tokens>
        >;

      t.OtherToken =
        (e.Errors) (e.Collected) t.OtherToken e.Tokens;
    }
}

DoExpression-AfterBracket {
  s.Kind (e.Errors) (e.Collected)
  (e.SubexprErrors) (e.BracketTerms) (TkCloseBracket t.Pos) e.Tokens =
    <DoExpression
      s.Kind (e.Errors e.SubexprErrors)
      (e.Collected (Brackets e.BracketTerms)) e.Tokens
    >;

  s.Kind (e.Errors) (e.Collected)
  (e.SubexprErrors) (e.BracketTerms) (s.Type t.Pos e.Value) e.Tokens =
    <DoExpression
      s.Kind (e.Errors e.SubexprErrors (Error t.Pos 'Missed \')\''))
      (e.Collected (Brackets e.BracketTerms)) (s.Type t.Pos e.Value) e.Tokens
    >;
}

DoExpression-AfterCall {
  Result (e.Errors) (e.Collected) t.CallPos (e.FuncName)
  (e.SubexprErrors) (e.BracketTerms) (TkCloseCall t.Pos) e.Tokens =
    <DoExpression
      Result (e.Errors e.SubexprErrors)
      (e.Collected (Call t.CallPos (e.FuncName) e.BracketTerms)) e.Tokens
    >;

  Pattern (e.Errors) (e.Collected) t.CallPos (e.FuncName)
  (e.SubexprErrors) (e.BracketTerms) (TkCloseCall t.Pos) e.Tokens =
    <DoExpression
      Pattern
      (
        e.Errors e.SubexprErrors
        (Error
          t.CallPos
          'unexpected \'>\' in pattern expression, maybe missed \'=\''
        )
      )
      (e.Collected (Brackets e.BracketTerms)) e.Tokens
    >;

  Result (e.Errors) (e.Collected) t.CallPos (e.FuncName)
  (e.SubexprErrors) (e.BracketTerms) (s.Type t.Pos e.Value) e.Tokens =
    <DoExpression
      Result (e.Errors e.SubexprErrors (Error t.Pos 'Missed \'>\''))
      (e.Collected (Call t.CallPos (e.FuncName) e.BracketTerms))
      (s.Type t.Pos e.Value) e.Tokens
    >;

  Pattern (e.Errors) (e.Collected) t.CallPos (e.FuncName)
  (e.SubexprErrors) (e.BracketTerms) (s.Type t.Pos e.Value) e.Tokens =
    <DoExpression
      Pattern
      (
        e.Errors e.SubexprErrors
        (Error
          t.CallPos
          'unexpected \'>\' in pattern expression, maybe missed \'=\''
        )
        (Error t.Pos 'Missed \')\'')
      )
      (e.Collected (Brackets e.BracketTerms)) (s.Type t.Pos e.Value) e.Tokens
    >;
}

Expression-CheckBrackets {
  s.Kind (e.Errors) (e.Expression) (s.Type t.Pos) e.Tokens,
      <OneOf s.Type TkCloseBracket TkCloseCall>: True =
    <Expression-CheckBrackets-AfterSubexpr
      s.Kind
      (e.Errors (Error t.Pos 'unbalanced ' <TokName s.Type>))
      (e.Expression)
      <Expression-Aux s.Kind e.Tokens>
    >;

  s.Kind (e.Errors) t.Expression e.Tokens = (e.Errors) t.Expression e.Tokens;
}

Expression-CheckBrackets-AfterSubexpr {
  s.Kind (e.Errors) (e.Expression)
  (e.SubexprErrors) (e.Subexpression) e.Tokens =
    <Expression-CheckBrackets
      s.Kind (e.Errors e.SubexprErrors) (e.Expression e.Subexpression) e.Tokens
    >;
}


UnexpectedToken {
  (TkError t.Pos e.Message) e.Expected =
    (Error t.Pos e.Message);

  (s.Type t.Pos e.Value) e.Expected =
    (Error t.Pos 'unexpected ' <TokName s.Type> ', expected ' e.Expected);
}

TokName {
  TkName = 'identifier';
  TkCompound = 'compound symbol';
  TkMacroDigit = 'number';
  TkChar = 'character';
  TkVariable = 'variable';
  TkOpenBracket = '\'(\'';
  TkCloseBracket = '\')\'';
  TkOpenBlock = '\'{\'';
  TkCloseBlock = '\'}\'';
  TkOpenCall = '\'<\'';
  TkCloseCall = '\'>\'';
  TkComma = '\',\'';
  TkColon = '\':\'';
  TkAssign = '\'=\'';
  TkSemicolon = '\';\'';
  TkExtern = '$EXTERN';
  TkEntry = '$ENTRY';
  TkSpecComment = '\'*$\'-comment';
  TkEOF = 'end of file';
}


/*
 <Semantics t.ErrorUnit*>
    == Success t.Unit*
    == Fails t.Error*
*/
Semantics {
  e.ErrorsUnits,
      <FilterUnitsAndFunctionNames e.ErrorsUnits>: e.Units (e.Functions),
      <FindSemanticsErrors (e.Functions) e.ErrorsUnits>:
    {
      /* пусто */ = Success e.Units;

      e.Errors = Fails e.Errors;
    };
}

FilterUnitsAndFunctionNames {
  e.ErrorsUnits =
    <DoFilterUnitsAndFunctionNames
      e.ErrorsUnits (<Builtins>)
    >;
}

DoFilterUnitsAndFunctionNames {
  (Error t.Pos e.Message) e.ErrorsUnits (e.Names) =
    <DoFilterUnitsAndFunctionNames e.ErrorsUnits (e.Names)>;

  (SpecialComment t.Pos e.Text) e.ErrorsUnits (e.Names) =
    (SpecialComment t.Pos e.Text)
    <DoFilterUnitsAndFunctionNames e.ErrorsUnits (e.Names)>;

  (Function t.Pos (e.Name) s.Scope e.Sentences) e.ErrorsUnits (e.Names) =
    (Function t.Pos (e.Name) s.Scope e.Sentences)
    <DoFilterUnitsAndFunctionNames e.ErrorsUnits (e.Names (e.Name))>;

  (Extern e.ExternalNames) e.ErrorsUnits (e.Names) =
    (Extern e.ExternalNames)
    <DoFilterUnitsAndFunctionNames e.ErrorsUnits (e.Names e.ExternalNames)>;

  /* кончились юниты и ошибки */ (e.Names) = (e.Names);
}

FindSemanticsErrors {
  (e.FuncNames) (Error t.Pos e.Message) e.ErrorsUnits =
    (t.Pos e.Message)
    <FindSemanticsErrors (e.FuncNames) e.ErrorsUnits>;

  (e.FuncNames) (SpecialComment t.Pos e.Text) e.ErrorsUnits =
    <FindSemanticsErrors (e.FuncNames) e.ErrorsUnits>;

  (e.FuncNames) (Function t.Pos (e.Name) s.Scope e.Sentences) e.ErrorsUnits =
    <CheckSentences (e.FuncNames) (/* variables */) e.Sentences>
    <FindSemanticsErrors (e.FuncNames) e.ErrorsUnits>;

  (e.FuncNames) (Extern e.Names) e.ErrorsUnits =
    <FindSemanticsErrors (e.FuncNames) e.ErrorsUnits>;

  (e.FuncNames) /* кончились ошибки и юниты */ = /* пусто */
}

CheckSentences {
  (e.FuncNames) (e.Variables) (e.Sentence) e.Sentences =
    <CheckSentence
      (e.FuncNames) (e.Variables) <ExtractCheckable e.Sentence>
    >
    <CheckSentences (e.FuncNames) (e.Variables) e.Sentences>;

  (e.FuncNames) (e.Variables) /* всё */ = /* всё */;
}

ExtractCheckable {
  (e.Pattern) e.Conditions-And-SentenceTail =
    (<ExtractCheckable-Expr e.Pattern>)
    <ExtractCheckable-Tail e.Conditions-And-SentenceTail>;
}

ExtractCheckable-Tail {
  (Condition (e.Result) (e.Pattern)) e.Tail =
    (Condition
      (<ExtractCheckable-Expr e.Result>) (<ExtractCheckable-Expr e.Pattern>)
    )
    <ExtractCheckable-Tail e.Tail>;

  RETURN (e.Result) = RETURN (<ExtractCheckable-Expr e.Result>);

  CALL-BLOCK (e.Result) e.Sentences =
    CALL-BLOCK (<ExtractCheckable-Expr e.Result>)
    <ExtractCheckable-Sentences e.Sentences>;
}

ExtractCheckable-Sentences {
  (e.Sentence) e.Sentences =
    (<ExtractCheckable e.Sentence>) <ExtractCheckable-Sentences e.Sentences>;

  /* пусто */ = /* пусто */;
}

ExtractCheckable-Expr {
  t.Term e.Expr =
    <ExtractCheckable-Term t.Term> <ExtractCheckable-Expr e.Expr>;

  /* пусто */ = /* пусто */;
}

ExtractCheckable-Term {
  (Variable t.SrcPos s.VarType e.Index) = (Variable t.SrcPos s.VarType e.Index);

  (Brackets e.Expr) = <ExtractCheckable-Expr e.Expr>;

  (Call t.Pos (e.Name) e.Expr) =
    (Call t.Pos e.Name) <ExtractCheckable-Expr e.Expr>;

  t.OtherTerm = /* здесь нет переменных */;
}

CheckSentence {
  (e.FuncNames) (e.Variables) (e.PatternItems) e.Tail =
    <CheckSentence-Tail
      (e.FuncNames) (e.Variables e.PatternItems) e.Tail
    >;
}

CheckSentence-Tail {
  (e.FuncNames) (e.Variables) (Condition (e.ResultItems) (e.PatternItems)) e.Tail =
    <CheckResult (e.FuncNames) (e.Variables) e.ResultItems>
    <CheckSentence-Tail (e.FuncNames) (e.Variables e.PatternItems) e.Tail>;

  (e.FuncNames) (e.Variables) RETURN (e.ResultItems) =
    <CheckResult (e.FuncNames) (e.Variables) e.ResultItems>;

  (e.FuncNames) (e.Variables) CALL-BLOCK (e.ResultItems) e.Sentences =
    <CheckResult (e.FuncNames) (e.Variables) e.ResultItems>
    <CheckSentences (e.FuncNames) (e.Variables) e.Sentences>;
}

CheckResult {
  (e.FuncNames) (e.Variables) (Call t.Pos e.Name) e.Items,
      e.FuncNames:
    {
      e.Names-B (e.Name) e.Names-E =
        <CheckResult (e.FuncNames) (e.Variables) e.Items>;

      e.Names =
        (t.Pos 'function ' e.Name ' not declared')
        <CheckResult (e.FuncNames) (e.Variables) e.Items>;
    };

  (e.FuncNames) (e.Variables) (Variable t.Pos s.Type e.Index) e.Items,
      e.Variables:
    {
      e.Vars-B (Variable t.DeclPos s.Type e.Index) e.Vars-E =
        <CheckResult (e.FuncNames) (e.Variables) e.Items>;

      e.Vars =
        (t.Pos 'variable ' s.Type '.' e.Index ' not declared')
        <CheckResult (e.FuncNames) (e.Variables) e.Items>;
    };

  (e.FuncNames) (e.Variables) /* всё */ =
    /* всё */;
}
