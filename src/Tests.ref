$ENTRY RunTests {
  = <Perform SimpleCondition SimpleRepeatedCondition SimpleOneELoop>;
}

Perform {
  s.NextTest e.Tests
    = <Prout '* Run test ' s.NextTest>
      <Mu ('Test' <Explode s.NextTest>)>
      <Perform e.Tests>;

  /* пусто */ = /* ничего не делаем */
}

AssertEq {
  e.Equals (e.Equals) =
}

*$*****************************************************************************

SimpleCondition {
  (e.X) e.Y, e.Y: e.X = Equals e.X;

  (e.X) e.Y = NotEquals (e.X) e.Y;

  e.Other = FORMAT e.Other;
}

SimpleCondition-Edge {
  (e.X) e.Y, e.Y: e.X = Equals e.X;
}

TestSimpleCondition {
  = <AssertEq <SimpleCondition ('ABC') 'ABC'> (Equals 'ABC')>
    <AssertEq <SimpleCondition (/* пусто */) /* пусто */> (Equals /* пусто */)>
    <AssertEq <SimpleCondition ('AAA') 'BBB'> (NotEquals ('AAA') 'BBB')>
    <AssertEq <SimpleCondition 'fail'> (FORMAT 'fail')>
    <AssertEq <SimpleCondition-Edge ('ABC') 'ABC'> (Equals 'ABC')>
}

*$*****************************************************************************

SimpleRepeatedCondition {
  (e.X) e.X e.Y, e.X: e.Y
    , X
    : {
        X = Equals e.X e.Y e.X e.Y;

        Y, e.X: e.Z, e.Y: e.X
          = <Prout e.X e.Y e.X e.X e.Y 'копирований быть не должно'>;
      };
  

  e.Other = FORMAT e.Other;
}

SimpleRepeatedCondition-Edge {
  (e.X) e.X e.Y, e.X: e.Y = Equals e.X e.Y e.X e.Y;
}

TestSimpleRepeatedCondition {
  = <AssertEq
      <SimpleRepeatedCondition ('ABC') 'ABCABC'>
      (Equals 'ABCABCABCABC')
    >
    <AssertEq <SimpleRepeatedCondition ()> (Equals)>
    <AssertEq <SimpleRepeatedCondition 'other'> (FORMAT 'other')>
    <AssertEq
      <SimpleRepeatedCondition-Edge ('ABC') 'ABCABC'>
      (Equals 'ABCABCABCABC')
    >
}

*$*****************************************************************************

SimpleOneELoop {
  (e.Sample) e.Items-B ((e.Key) (e.Value)) e.Items-E
    , e.Key: e.Sample
    = (e.Items-B) (e.Value) (e.Items-E);

  (e.Sample) e.Items = (e.Items);
}

SimpleOneELoop-Edge {
  (e.Sample) e.Items-B ((e.Key) (e.Value)) e.Items-E
    , e.Key: e.Sample
    = (e.Items-B) (e.Value) (e.Items-E);
}

TestSimpleOneELoop {
  = <AssertEq
      <SimpleOneELoop
        ('ABC')
        X 100 (('XXX') ('YYY')) 'AAAAA' (('ABC') ('DEF')) () () ()
      >
      (
        (X 100 (('XXX') ('YYY')) 'AAAAA')
        ('DEF')
        (() () ())
      )
    >
    <AssertEq
      <SimpleOneELoop
        ('ABD')
        X 100 (('XXX') ('YYY')) 'AAAAA' (('ABC') ('DEF')) () () ()
      >
      (
        (X 100 (('XXX') ('YYY')) 'AAAAA' (('ABC') ('DEF')) () () ())
      )
    >
    <AssertEq
      <SimpleOneELoop-Edge
        ('ABC')
        X 100 (('XXX') ('YYY')) 'AAAAA' (('ABC') ('DEF')) () () ()
      >
      (
        (X 100 (('XXX') ('YYY')) 'AAAAA')
        ('DEF')
        (() () ())
      )
    >
}

/*
SimpleOneELoop {
  (e.Sample) e.Items-B ((e.Key) (e.Value)) e.Items-E
    = <SimpleOneELoop1
        (e.Sample) (e.Items-B) (e.Key) (e.Value) (e.Items-E)
        e.Key
      >;


  e.OTHER = <SimpleOneELoop0 e.OTHER>;
}

SimpleOneELoop1 {
  (e.Sample) (e.Items-B) (e.Key) (e.Value) (e.Items-E)
  e.Sample
    = (e.Items-B) (e.Value) (e.Items-E);

  (e.Sample) (e.Items-B) (e.Key) (e.Value) (e.Items-E)
  e.OTHER
    = <SimpleOneELoop2
        (e.Sample) (e.Items-B) ((e.Key) (e.Value)) e.Items-E
      >;
}

SimpleOneELoop2 {
  (e.Sample) (e.Items-B1) t.Items-B e.Items-B2 ((e.Key) (e.Value)) e.Items-E
    = <SimpleOneELoop1
        (e.Sample) (e.Items-B1 t.Items-B e.Items-B2) (e.Key) (e.Value) (e.Items-E)
        e.Key
      >;

  (e.Sample) (e.Items-B1) e.Items-B2
    = <SimpleOneELoop0 (e.Sample) e.Items-B1 e.Items-B2>;
}

SimpleOneELoop0 {
  (e.Sample) e.Items = (e.Items);
}

*/


*$*****************************************************************************


Intersect {
  (e.B1 s.1 e.E1) (e.B2 s.2 e.E2), <Eq s.1 s.2>: True
    = s.1 <Intersect (e.E1) (e.B2 e.E2)>;

  (e.1) (e.2) = /* пусто */
}

Eq {
  t.X t.X = True;
  t.X t.Y = False;
}

Delim {
  e.Prefix t.Delim e.Suffix, <DelimTerm t.Delim>: True = (e.Prefix) e.Suffix;

  e.NoDelim = NoDelim
}

DelimTerm {
  '|' = True; t.Other = False;
}

Delim2 {
  e.Prefix e.Prefix t.Delim e.Suffix, <DelimTerm t.Delim>: True = <F e.Prefix> <G e.Prefix>;
  e.Other = Fail;
}

F { e.X = }
G { e.X = }

FindXY {
  (e.XB (e.XX) e.XE) e.YB (e.YY) e.YE
    , <CheckX e.XX (e.YY)>: True
    , <CheckY e.XX (e.YY)>: True
    = Ok;

  (e.X) e.Y = Fail;
}

CheckX { e.Any = True; }
CheckY { e.Any = True; }

NonsenceFunc {
  e.Begin (e.Inner) e.Inner e.Begin e.End
    , <Valid e.Begin>: e.End
    = <F e.Begin> <G e.Inner e.End> <H e.Inner e.Begin e.End>;

  s.ABC = s.ABC
}

Valid { e.X = e.X }
H { e.X = }

RepeatedNonsence {
  (e.Repeated) e.Repeated e.Tail, <Tail e.Tail>: e.Tail
    = <F (e.Tail) e.Repeated> <F (e.Repeated) e.Tail>;

  s.ABC = s.ABC
}

Tail { e.X = e.X }

KeyValue {
  (e.Sample) e.Items-B (e.Key (e.Value)) e.Items-E
    , <EqualNoCase (e.Sample) e.Key>: True = Found e.Value;

  (e.Sample) e.Items = NotFound;
}

EqualNoCase {
  (e.X) e.X = True; (e.X) e.Y = False;
}

KeyValueRep {
  (e.Key) e.Items-B (e.Key (e.Value)) e.Items-E
    , <CheckX e.Value>: True
    = Found (e.Key) (e.Key) e.Value;

  (e.Key) e.Items = NotFound;
}
